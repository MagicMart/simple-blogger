{"id":"2NfO","dependencies":[{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/package.json","includedInParent":true,"mtime":1555347791161},{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/package.json","includedInParent":true,"mtime":1555279877954},{"name":"./internal/_curry3","loc":{"line":1,"column":35},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/reduce.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/internal/_curry3.js"},{"name":"./internal/_reduce","loc":{"line":3,"column":35},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/reduce.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/internal/_reduce.js"}],"generated":{"js":"var r=require(\"./internal/_curry3\"),e=require(\"./internal/_reduce\"),u=r(e);module.exports=u;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/src/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":1,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":3,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":3,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":3,"column":0},"generated":{"line":1,"column":46}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":53,"column":0},"generated":{"line":1,"column":68}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":53,"column":0},"generated":{"line":1,"column":70}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":53,"column":0},"generated":{"line":1,"column":72}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":54,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":54,"column":0},"generated":{"line":1,"column":82}},{"source":"../node_modules/ramda/src/reduce.js","original":{"line":54,"column":0},"generated":{"line":1,"column":90}}],"sources":{"../node_modules/ramda/src/reduce.js":"var _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\nvar _reduce = /*#__PURE__*/require('./internal/_reduce');\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\n\n\nvar reduce = /*#__PURE__*/_curry3(_reduce);\nmodule.exports = reduce;"},"lineCount":null}},"error":null,"hash":"ec031d2dd7b22cd54fdada6e47d1be15","cacheData":{"env":{}}}