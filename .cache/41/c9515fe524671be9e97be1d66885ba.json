{"id":"../node_modules/remark-parse/lib/parse.js","dependencies":[{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/package.json","includedInParent":true,"mtime":1555527510973},{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/remark-parse/package.json","includedInParent":true,"mtime":1555527796783},{"name":"xtend","loc":{"line":3,"column":20},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/remark-parse/lib/parse.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/xtend/immutable.js"},{"name":"unist-util-remove-position","loc":{"line":4,"column":29},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/remark-parse/lib/parse.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/unist-util-remove-position/index.js"}],"generated":{"js":"'use strict';\n\nvar xtend = require('xtend');\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\n\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n\n/* Parse the bound file. */\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {line: 1, column: 1, offset: 0};\n  var content = xtend(start);\n  var node;\n\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/remark-parse/lib/parse.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"../node_modules/remark-parse/lib/parse.js":"'use strict';\n\nvar xtend = require('xtend');\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\n\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n\n/* Parse the bound file. */\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {line: 1, column: 1, offset: 0};\n  var content = xtend(start);\n  var node;\n\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}\n"},"lineCount":46}},"error":null,"hash":"43549aa596af84506563a364ceae17a2","cacheData":{"env":{}}}