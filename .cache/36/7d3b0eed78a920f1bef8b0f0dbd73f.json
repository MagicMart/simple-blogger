{"id":"../node_modules/ramda/src/addIndex.js","dependencies":[{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/package.json","includedInParent":true,"mtime":1555527510973},{"name":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/package.json","includedInParent":true,"mtime":1555527797771},{"name":"./internal/_concat","loc":{"line":1,"column":35},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/addIndex.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/internal/_concat.js"},{"name":"./internal/_curry1","loc":{"line":3,"column":35},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/addIndex.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/internal/_curry1.js"},{"name":"./curryN","loc":{"line":5,"column":34},"parent":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/addIndex.js","resolved":"/home/martin/Web-development/parcel-react-template/empty-project-babel-css-react/node_modules/ramda/src/curryN.js"}],"generated":{"js":"var _concat = /*#__PURE__*/require('./internal/_concat');\n\nvar _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\n\n\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nmodule.exports = addIndex;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ramda/src/addIndex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"../node_modules/ramda/src/addIndex.js":"var _concat = /*#__PURE__*/require('./internal/_concat');\n\nvar _curry1 = /*#__PURE__*/require('./internal/_curry1');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\n\n\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nmodule.exports = addIndex;"},"lineCount":47}},"error":null,"hash":"a870438cbc34e4d8031475fe31d1e8a6","cacheData":{"env":{}}}